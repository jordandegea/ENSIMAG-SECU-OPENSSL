# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "minimal/jessie64"

  # Some optimizations
  config.vm.provider "virtualbox" do |v|
    v.linked_clone = true
    v.memory = 512
    v.cpus = 1
    v.customize ["modifyvm", :id, "--usb", "on"]
    v.customize ["modifyvm", :id, "--usbehci", "off"]
  end


  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 10080
  config.vm.network "forwarded_port", guest: 443, host: 10443

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get upgrade
     apt-get install -y apache2
     a2enmod ssl
     service apache2 restart
     sudo apt-get --assume-yes remove openssl 
     sudo apt-get --assume-yes install libapr1-dev libaprutil1-dev
     sudo apt-get --assume-yes build-dep lighttpd
     wget http://mirrors.ircam.fr/pub/apache//httpd/httpd-2.4.23.tar.gz
     tar -xzcv httpd-2.4.23.tar.gz
     cd httpd-2.4.23
     ./configure --with-ssl=/usr/bin
     make
     make install
     cd ..
     wget https://www.openssl.org/source/openssl-1.0.1.tar.gz
     tar -xzvf openssl-1.0.1.tar.gz
     cd openssl-1.0.1
     ./config
     make
     mv Makefile Makefile.bak
     sed s/all\\ install_docs\\ install_sw/all\\ install_sw/g Makefile.bak > Makefile
     sudo make install 
     sudo mv apps/* /usr/bin/
     cd ..
     sudo openssl req -x509 -nodes -days 365 \
        -newkey rsa:2048 \
        -keyout /etc/ssl/certs/ssl-cert-snakeoil.pem \
        -out /etc/ssl/private/ssl-cert-snakeoil.key \
        -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com"
  SHELL
end
